#!/usr/bin/env python3

import sys, argparse

from browserstack.api import BrowserStackAPIClient

def art():
  print("")
  print("| |__  _ __ _____      _____  ___ _ __ ___| |_ __ _  ___| | __   ___| (_)")
  print("| '_ \| '__/ _ \ \ /\ / / __|/ _ \ '__/ __| __/ _` |/ __| |/ /  / __| | |")
  print("| |_) | | | (_) \ V  V /\__ \  __/ |  \__ \ || (_| | (__|   <  | (__| | |")
  print("|_.__/|_|  \___/ \_/\_/ |___/\___|_|  |___/\__\__,_|\___|_|\_\  \___|_|_|")
  print("")

if __name__ == '__main__':
  parser = argparse.ArgumentParser(
    description='A CLI wrapper for the BrowserStack API',
    formatter_class=argparse.RawTextHelpFormatter,
    add_help=False
  )

  parser.add_argument('action', type=str,
                      help='''Which action should be taken? 

Available commands:

launch
kill
worker
browsers''')

  parser.add_argument('-h', '--help', action='store_true',
                      help='''Show this menu and quit
                      ''')

  parser.add_argument('-o', '--os', type=str,
                      help='''Operating system
                      ''')

  parser.add_argument('-ov', '--os_version', type=str,
                      help='''Operating system version
                      ''')

  parser.add_argument('-b', '--browser', type=str,
                      help='''Browser
                      ''')

  parser.add_argument('-bv', '--browser_version', type=str,
                      help='''Browser version
                      ''')

  parser.add_argument('-d', '--device', type=str,
                      help='''Device name
                      ''')

  parser.add_argument('-u', '--url', type=str,
                      help='''URL to request once browser is launched
                      ''')

  parser.add_argument('-t', '--timeout', type=int,
                      help='''Timeout
                      ''')

  parser.add_argument('-p', '--pid', type=int,
                      help='''Process or worker id
                      ''')

  parser.add_argument('-a', '--attach', action='store_true',
                      help='''If given, the program will wait after launching a browser before 
exiting the program. This is useful when working with test runners 
such as Testem.

''')


  if len(sys.argv) == 1 or '--help' in sys.argv or '-h' in sys.argv:
      art()
      parser.print_help()
      sys.exit(1)

  args = parser.parse_args()

  api_client = BrowserStackAPIClient()

  if args.action == 'launch':
      payload = {
        'os': args.os,
        'os_version': args.os_version,
        'browser': args.browser,
        'browser_version': args.browser_version,
        'device': args.device,
        'url': args.url,
        'timeout': args.timeout
      }
      results = api_client.launch_browser(payload)
      print(results)

  if args.action == 'worker':
      worker_id = args.pid
      results = api_client.get_worker(worker_id)
      print(results)

  if args.action == 'kill':
      print('Kill process {}'.format(args.pid))
      worker_id = args.pid
      results = api_client.get_worker(worker_id)
      print(results)

  if args.action == 'browsers':
      api_client.get_browsers()
